01.路由原理
	1）hash ==》 location.hash 切换  window.onhashchange 监听路径的切换
	2）history ==》 history.pushState 切换 window,onpopstate 监听
02.rem移动端适配
	1）window.devicePixelRatio	比例是几，就是1css像素等于几物理像素
	2）document.documentElement.clientWidth	拿到可实现的宽度
	3）确定设计稿的宽度，确定第一实现设备的宽度
	4）根节点设定font-size的值：
	<script>document.documentElement.style.fontSize = document.documentElement.clientWidth / 750 * 100</script>
	5）原理rem会乘fontSize的值，所以直接按设计稿上量的px值除以设定的值来写rem   750设计稿宽度，100自己设定的rem对值
	6）使用px to rem
		*需要自己设置对应的rem
		*f1设置rem
03.ajax的理解
	1）实现方式（在后端当中可以直接用ajax吗（不能））？
		*基于XHR（XMLHttpRequest）实现方式
		*XML：Extensible Markup Language：可拓展（<parent><parent/>不局限于原本的html）的标记语言（成对出现）
		*HTML：Hypen Text markup Language ：超文本（  通过标签（< title>< title/>）组成的超文本（Text，超链接））标记语言（成对出现）
		*ajax：asynchnonous（异步的） JavaScript and XML
		*无加载刷新技术：实现局部渲染技术
		*1995 IE5 利用javascript 单独向服务器发送http请求，
		*所有基于ajax的通讯基本都是json的数据格式
		*看图
		*如果我们需要创建N个不同的ajax请求，需要实例几次 XMLHttprequest？
			*如果实例多个XML，发送多个请求，只会回来一个请求
			*如何创建N个不同的ajax请求？
				*创建XHR
				*发送HTTP请求 ： Hyper Text Transfer protocol
				*接收服务器给前端的结果
				*处理服务器返回的结果
		*简单请求？复杂请求？
			*主要的请求方式：get Post HEAD OPTIONS PUT delete conenct race
			*除了get以外，所有都是复杂请求
			*get post 区别？
				*post更安全：不会作为url的一部分、不会被缓存、保存在服务器日志和浏览器记录中
				*post发送的数据量更大
				*post能发送更多的数据类型，get只能发送ASCLL字符	
			*为什么不用其他的请求方式？
				
	2）ajax、fetch、Axios三者有什么区别
		*ajax是一个技术统称，是一个概念模型，囊括了很多技术，并不特指某一技术，特性就是让页面实现局部刷新
		*XMLHttpRequest只是实现Ajax的一种方式
		*fetch（API）在ES6出现的，使用了promise对象，是XHMHttpRequerst的替代品
			*特点：使用promise，不适用回调函数
			*采用模块化设计，将rep，res等对象分开
			*通过数据流对象处理数据，提高网站性能
			*不会产生回调地狱，采用链式
		*Axios
			*Axios是基于promise封装的网络请求库，是基于XHR的二次封装

04.http缓存
	1）什么是http缓存
		*第一次访问网站的时候，需要加载html，css，js，img。。。
		*第一次之后就不用全部加载，
		*输入网络地址==》加载处页面
			*CPU计算、页面渲染、网络请求（主要）
			*减少网络请求的体积和数量，提高加载速度，提升用户体验
	2）强制缓存
		*第一次请求资源，后端返回资源时，会有请求头Cache-Control：max-age：86400
		*再此访问网站时，网站会自己判断max-age有没有过期，没有则拿缓存
		*前端不需要做任何事情，response-headers
	3）协商缓存（对比缓存）
		*一种服务端的返回策略
		*浏览器发送请求和资源标识
		*如果不是最新资源：服务器返回200状态码、最新资源、新的资源标识
		*如果是最新资源：服务器返回304状态码，直接从缓存中拿资源
		*资源标识：服务器返回：Last-Modifien：资源上一次修改时间（请求头里面：if-Modified-Since）；ETag：资源对应的唯一字符串，请求头带上（if-None-Match），看是否和ETag吻合
	05.HTTP 常用的状态码及使用场景（对http协议的了解）（客户端和服务器之间的协议）
		1）请求方法：get post put delete
		2）响应
		3）状态码：Status code
			*成功：200；2开头表示成功
			*资源不存在：404；4开头的都是客户端的问题。403：服务器无权访问
			*服务端错误：500；5开头都是服务端错误
			*3标识重定向状态；302表示临时重定向，表示这个资源只是暂时不能访问，过一段时间或者进行一些操作可以访问到，一般在需要权限时，需要用户登录会用到
			303表示请求对应的资源存在着另一个URI，应使用GET方法定向获取请求的资源
	06. HTTP 常用的请求方式，区别和用途？（get是浏览器的默认方法）
		1）Get（以检索，获取为主），请求内容会在url上显示，get可能会用到缓存
		2）Post（以创建，显示为主），请求内容不会在url上显示，post一般是不做缓存的
		3）url是有长度限制的（长度限定是浏览器限制的）
		4）url绝大部分使用了ASCLL集，使用的百分号编码
	07.HTTP是什么？（属于应用层，提供用户访问资源的一种协议）（持久链接）（TCP/IP）
		1）是个p，Protocol（协议）
		2）HTTP涉及客户端和服务端
		3）涉及请求方式，回应状态码
		4）Content-type：返回的内容类型，让浏览器更好的处理
		5）请求头上加cookie：保持持久登录
	08.HTTPS 是什么？具体流程
		1）因为http请求和响应都是明文的，所有人都能看懂，为了给http增加安全性，所以就出现了HTTPS
		2）https是在http的基础上用TLS/SSL进行加密，通信不容易收到拦截和攻击
		3）SSL是TLS的前身，限制绝大部分浏览器都不支持SSL而是支持TLS
		4）流程：
			1.客户端向服务端发送自己支持的TSL和加密套件，同时生成随机数给服务器
			2.服务端确认支持的TSL版本以及选择的加密套件，同时生成第二位随机数给服务器
				接着，服务端还把证书和公钥发送给客户端
			3.发送完后告诉客户端，客户端生成第三个随机数，预主密钥，预主密钥用刚刚接收到的公钥加密后发送给服务端
			4.客户端收到加密后的预主密钥后，用自己的私钥进行解密
			5.最后服务端和客户端将第一随机数+第二随机数+预主密钥生成会话密钥
			6.最后会话密钥使用对称加密就能够解开
	09.TCP三次握手和四次挥手
		1）三次握手（中国机长：成都成都，四川8633。四川8633，请讲。我现在有点故障，申请下高度）
		2）四次挥手（客户端和服务端都能主动发起关闭请求）
			
	10.CDN（加速器）
		1）什么是CDN（内容分发网络）
			帮服务器静距离给用户分发网页内容
		2）网页内容
			*服务器在发送数据的时候，会带上cache-control请求头，这样CDN就知道哪些内容需要保持，需要保存内容
			*静态内容	
			*动态内容
			*负载均衡，任播
	11.在交互过程中如果数据传送完了，还不想断开连接怎么办，怎么维持
		*在 HTTP 中响应体的 Connection 字段指定为 keep-alive
	12.WebSocket与Ajax的区别
	13.Cookie、Session、Token究竟区别在哪
		1）Cookie：浏览器发送请求，服务器进行Cookie设置，也就是Set-Cookie，Cookie有名和值两个属性，服务器会把名和值属性里的内容填充完整，Cookie发给浏览器后，浏览器会自动保存起来，这样浏览器以后发送的每一个请求都会自动附上这个Cookie（但是把用户名和密码放在cookie不安全，能够直接被看见）
		2）Session：浏览器发送请求，服务器在数据库里生成SessionID和会话结束时间，服务器会设置Cookie，并且把Session ID加入到Cookie里，再把会话结束时间设置为Cookie的有效期，浏览器会将Session ID 进行保存，这样浏览器每次都会通过Cookie发送Session ID，等到Session ID失效后浏览器会自动删除（在特点时间，用户访问数据量过大的时候，可能会需要存储大量Session ID在服务器里，所以出现了JWT（token)，）
			保存在服务器这边的
		3）Token：诞生在服务器，保存在浏览器这边的

	14.Cookie、localStorage、SessionStorage（这两个都是Web5的）
		1）Cookie不能超过4kb，Cookie每个都需要单独设置，所有窗口都能访问
		2）localStorage永远在浏览器里，同步执行，太大会影响速度，所有窗口都能访问
		3）SessionStorage关闭浏览器就会被删除，仅在当前页面有
	15.浏览器是如何运作的？
		1）输入内容后，ui线程会捕捉你的输入内容，如果访问的是网站，则ui线程会启动一个网络线程来请求DNS来进行域名解析，连接服务器获取数据
		2）如果输入的是关键词，浏览器会使用默认配置的搜索引擎来查询
		3）网络线程后：网络线程获取到数据后，通过safeBrowsing检测站点是否是恶意站点，如果是，如果不是，之后网络线程通知ui线程准备完成，ui线程会创建一个渲染器进程来渲染页面
		4）渲染器进程：把html，css，js，图片等资源渲染成用户可以交互的web页面，主进程将html解析，构造DOM数据结构，css和图片不会阻塞浏览器解析，因为不会影响dom生成，但遇到script标签，会停止html解析流程，去加载解析并且执行js，
		5）重绘（颜色改变），重排（left等），他们都会抢占主线程
			优化手段：requestAnimationFrame（）：原理：将js运行任务分成更小的任务卡，每一帧时间用完前会暂停js执行，归还主线程
					transform，不会抢占主线程
	16.

