01.TypeScript是什么？
1）以JavaScript为基础构建的语言
2）一个JavaScript的超集
3）可以在任何支持JavaScript的平台中执行
4）TS不能被JS解析器直接执行 ==》编译为JS
5）为什么要学TypeScript？
	*解决JS中可能出现的问题
6）TypeScript增加了什么？
	*类型
	*支持ES的新特性
	*添加ES不具备的新特性
	*丰富的配置选项

02.转化TypeScript代码
1）tsc xxx

03.TS的类型声明
1）let a: number //声明一个变量a，同时指定它的类型为number
      a = 'hello' //此行代码会报错，不能赋值字符串
2）let b:boolean = false
3）let b = false // 如果变量的声明和赋值是同时进行的，ts会自动对变量进行类型检测
4）function sum(a,b){} // 没有规定a，b是数字 function num (a:number,b:number)：number{return a+b } //规定a，b是数字，规定返回值是数字

04.TS中类型
1）number
2）string
3）boolean
4）字面量：其本身（const）
	let a : 10     a = 12 //报错
	let b: 'male' | 'female' (联合类型) |
	b = 'male' b= 'female' // 都不会报错
5）any（一个变量设置类型为any后相当于对改变量关闭了TS的类型检测）（避免）：unKnown
	let d : any;
	d = 10
	d = 'hello'
	let d (隐式any，避免)（还霍霍别人  let s:string   s = d // 不报错）
	let e : unKnown;
	e = 10
	e = 'hello'  // 都不会报错 （不会霍霍别人 ;let s:string   s = e // 报错）
	(if(typeof e === 'string'){
		s = e 
	})
	//类型断言
	s = e as string  （告诉解析器变量的实际类型）
	s = <string>e 
6）void（空值）
	function fn : void{
		// 表示为空，没有返回值，有返回值就报错
		return undefined      return null  // 都不会报错
	}
7）never（没有值）连undefined都不会返回(需要异常抛出)
	function fn(): never {
    		throw new Error('报错了')
	}
8）object
	*let b: object（不实用，全民皆对象）
	b = {}
	b = function () { } // 都不会报错
	* let b : {name:string}
	b = {} // 报错，需要name属性为string
	b = {name:'小唐'}
	*let b : {name:string , age?:number}
	b = {name:'小唐'} // 需要加问号，表示属性可选
	*let b : {name:string}
	b = {name:'小唐',age:18} // 报错(解决：let c :{name:string,[propName:string]:any})
	
9）funciong
	*let d : Function (不好用)
	*let d : (a:number,b:number) => number
	d = function(n1,n2){
		return n1+n2
	}
10）array
	*let e: string[] // 表示字符串数组 number[] // 数值 Array<number>
	e = ['a','b']
	*let f: {}[]
	f = [{ name: '小唐' }] // 对象数组
	*let f: [string][]
	f = [['name'], ['d']]
11）tuple（元组：元组就是固定长度的数组）
	let h : [string,string]
	h = ['hello','abb',132] // 报错
12）enum （枚举）
	let i :{name:string,gender:string};
	i = {name:'小唐',gender:'男'}
	*let i : {name:string,gender:0 | 1}
	enum Gender{
		Male
		Female
	}
	let i : {name:string,gender:Gender}
	i = {
		name:'小唐'，
		gender:Gender.Male
	}
	if(i.gender === Gender.Male){
		
	}
13）扩展
*let j : {name:string} & {age:number}
	j = {name:'xt',age:18}
*type myType = string
type myType = 1 | 2 | 3 | 4 
let k : myType
let L：myType	

05.编译选项
1）自动编译 ： tsc xxx -w 开启自动编译；全部自动编译 tsc （必须有编译文件）
*tsc -init :创建编译文件 tsc 全部ts文件编译   tsc -w监视所有文件
2）编译文件内容（第一层）
	*include（包含，用来指定哪些ts文件需要被编译）
	"include": [
    		"./src/**/*"
  	] // * 表示任意文件 **任意目录
	*exclude(不包含) (一般不需要设置：node_modules是不会被编译的)
	*extends(继承）（引入外部文件）
	*files（具体文件）
3）编译文件内容（第二层compilerOptions下的）
"compilerOptions"：{
	"target":"ES3" // 编译成哪个版本的js,
	"module":"ES6" // 指定要使用的模块化规范，
	"lib":[] // 用来指定项目中要用的库，一般不动,
	"outDir": "dist"//指定编译后的文件位置
	"outFile": "dist"// 将代码合并为一个文件,两个ts代码合并到一起
	"allowJs": false // 是否对js文件进行编译
	"checkJs":false // 检查js代码是否符合规范
	"removeComments":false // 是否移除注释
	"noEmit":false  // 不生成编译后的文件
	"noEmitOnError":false //当有错误时不生成编译后的文件
	"alwaysStrict":false // 严格模式
	"noImplicitAny":false // 不运行隐式Any类型
	"noImplicitThis":false //不允许不明确类型的this
	"strictNullChecks":false //严格的检查空值
	"strict":true // 所有严格检查的总开关
}

06.webpack打包ts代码
1）创建webpack pack.json    npm init -y
2）webpack插件
*html-webpack-plugin 用法  const html = html-webpack-plugin  new html({template:'./src/index.html'})

*webpack-dev-server 用法 start:'webpack server --open' // 热更新

*clean-webpack-plugin 用法 const { CleanWebpackPlugin } = require('clean-webpack-plugin')
new CleanWebpackPlugin()
作用：删除原来的dist

*@babel/core(核心工具) @babel/preset-env（预制环境） babel-loader（babel与webpack结合） core-js（js的运行环境，让老版本的环境用到新的技术，需要按需引入）

*加载器执行顺序，从后往前执行，所以要先将ts转化成js，js再根据babel转化（babel可以将js文件内容转化成指定的浏览器器兼容的代码）,core-js能提供给你需要的运行环境

*ie兼容问题：不支持兼容函数，但babel转化后webpack会自动生成一个箭头函数，所以会报错，environment:{
	arrowFunction:false  // 告诉webpack不适用箭头
}

07.面向对象
1）什么是面向对象？
*程序之中所有的操作都需要通过对象来完成
	*操作浏览器需要window对象
	*操作网页要使用document对象
	*操作控制台要使用console对象
2）什么是对象？（现实事物的抽象，要有数据，还要有功能）
*面向对象就需要拥有对象，要创建对象，必须定义类

08.类
1）类又是什么？
	*可以理解为对象的模型
	*程序中可以根据类创建指定类型的对象
2）有了类，就能够new出来一个对象
3）function Person() {
        this.name = '小唐'; 必须通过实例对象才能访问
    }
   Person.age = 18; 相当于 static age = 18 ,不用通过实例对象就能够访问到
4）TS的类
实例属性： name:string = '孙悟空' ,直接写
readonly name:string = '孙悟空'
表示只读的属性

09.构造函数和this

10.super关键字
在类的方法中，super就表示当前类的父类
sayhello(){
	super.sayhello() // 调用父类的sayhello
}
实例方法中super指向父类的原型对象，子类静态方法中super指向父类

11.抽象类
abstranct class Animal (){}
以abstranct开头的是抽象类，和其他类区别不大，只是不能用来创建对象

12.接口（和抽象类很像）(一个定义的规范吗，对类的一些限制)
1）用来定义一个类结构，用来定义一个类中应该包含哪些属性和方法
	*同时接口也可以当成类型声明去使用
type mytype ={

} // 不能再声明一个 type mytype

interface myInterface {
    name: string,
    age: number
} // 能够再声明一个  interface myInterface  两个的接口内容能够合并
const obj: myInterface = {
    name: 'sss',
    age: 16
} // 和抽象类相比：接口中所有属性都不能有实际的值

*定义类时，可以使类去实现一个接口
	*实现接口就是使类满足接口的要求 implements
class Animo implements myInterface {
    name: string = '小唐'
    age: number = 18
}

13.属性的封装 （规定：以_开头的是私有属性）
1）问题：属性是在对象中设置的，属性可以任意被修改
per.name = '小周'
per.action = '我喜欢你'
这样会直接被修改
Ts可以在属性浅添加属性的修饰符
*🦄public（公共的） name : string //public 修饰的属性可以在任意位置访问（修改）
*🦄private（私人的） name : string // private 私有属性，只能在类内部修改，通过在类中添加方法可以被外部访问
*🦄protected受包含的属性，只能在当前类和当前类的子类中访问
所以可以在方法里面做判断，设置一些限制
2）TS中设置getter方法的方式
get name(){
	return this.name
}
set name(value:string){}
使用 console.log(per.name) per.name = '猪八戒' //通过 defineProperty 实现的

另一种写法(语法糖)
class Person{
	constructor(public name:number,public name:string){
		
	}
}

14.泛型（在定义函数或是类时，如果遇到类型不明确的就可以使用泛型）
function fn<T>(a: T): T {
    return a
}
fn(10) 不指定泛型，TS可以自动对类型进行推断
fn<string>('hello') 指定泛型
function fn<T,K>(a:T,b:K):T{
	console.log(b)
	return a
}
fn<number,string>(123,'hello')

*interface Inter{
	length:number
}
function fn3 <T extends Inter>(a:T):number{  表示泛型T必须Inter实现类（子类）
	return a.length
}
fn3({length:10})


15.项目搭建（任何东西都要写到类里（面向对象））
！在代码后面表示不会为空
this.body = document.getElementById('snake')!.getElementsByTagName('div')（动态获取div）
this.snake.insertAdjacentHTML('beforeend', '<div></div>') 添加div
appaly会自己调用，bind不会，bind（this）这里的是指创建了一个新的函数，把新的函数的this传了进去，所以调用的this都会是新的函数的this，不会改变

